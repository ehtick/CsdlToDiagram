// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace CsdlToDiagram
{
    using System.Text;
    using System.IO;
    using System.Linq;
    using System.Xml.Linq;
    using Microsoft.OData.Edm;
    using Microsoft.OData.Edm.Csdl;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Repos\CsdlToDiagram\CsdlToPlant.ttpre"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class CsdlToPlant : CsdlToPlantBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("\r\n");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 12 "C:\Repos\CsdlToDiagram\CsdlClassDiagram.plant.ttinclude"

private IEdmModel model;
private string theNamespace;
private string theFilename;

public void EmitPlantDiagram(string csdl, string filename)
{
	this.model = CsdlReader.Parse(XElement.Parse(csdl).CreateReader());
	if (this.model == null)
	{
		this.WriteLine("Failed to parse the CSDL file.");
	}

	this.theNamespace = this.model.DeclaredNamespaces.First();
	this.theFilename = filename;

        
        #line default
        #line hidden
        
        #line 27 "C:\Repos\CsdlToDiagram\CsdlClassDiagram.plant.ttinclude"
this.Write("@startuml\r\n\r\ntitle API Entity Diagram for namespace ");

        
        #line default
        #line hidden
        
        #line 30 "C:\Repos\CsdlToDiagram\CsdlClassDiagram.plant.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(this.theNamespace));

        
        #line default
        #line hidden
        
        #line 30 "C:\Repos\CsdlToDiagram\CsdlClassDiagram.plant.ttinclude"
this.Write(" in ");

        
        #line default
        #line hidden
        
        #line 30 "C:\Repos\CsdlToDiagram\CsdlClassDiagram.plant.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(this.theFilename));

        
        #line default
        #line hidden
        
        #line 30 "C:\Repos\CsdlToDiagram\CsdlClassDiagram.plant.ttinclude"
this.Write("\r\n\r\n\r\n");

        
        #line default
        #line hidden
        
        #line 33 "C:\Repos\CsdlToDiagram\CsdlClassDiagram.plant.ttinclude"

	this.EmitEntityContainer();
	this.WriteLine("");

	foreach (IEdmEntityType entity in model.SchemaElements.OfType<IEdmEntityType>())
	{
		this.EmitStructuralType(entity, "entity");
		this.EmitNavigationProperties(entity);
		this.EmitInheritance(entity);
		this.WriteLine("");

		// TODO: Add Bound functions and actions in the third vertical bar 
	}

	foreach (IEdmComplexType complex in model.SchemaElements.OfType<IEdmComplexType>())
	{
		this.EmitStructuralType(complex, "complexType");
		this.EmitInheritance(complex);
		this.WriteLine("");
	}

	foreach (IEdmEnumType enumeration in model.SchemaElements.OfType<IEdmEnumType>())
	{
		this.EmitEnumType(enumeration);
		this.WriteLine("");
	}
}

private string GetTypeName(IEdmTypeReference theType)
{
	var name = ExtensionMethods.ShortQualifiedName(theType);
	if (name == null)
	{
		// Collections don't produce a SQN.
		name = ExtensionMethods.FullName(theType);
	}

	if (name.Contains(this.theNamespace))
	{
		name = name.Replace(this.theNamespace + ".", string.Empty);
	}
	return name;
}

private string StripCollection(string name)
{
	const string collectionPrefix = "Collection(";
	if (name.Contains(collectionPrefix))
	{
		name = name.Replace(collectionPrefix, string.Empty);
		name = name.Substring(0, name.Length -1);
	}
	return name;
}

private string ConvertCollection(string name)
{
	const string collectionPrefix = "Collection(";
	const string collectionPrefixRender = "Collection[";
	if (name.Contains(collectionPrefix))
	{
		name = name.Replace(collectionPrefix, collectionPrefixRender);
		name = name.Substring(0, name.Length -1) + "]";
	}
	return name;
}

private string StripNamespace(string name)
{
	return name.Replace(this.theNamespace + ".", string.Empty);
}


private string GetTypeName(IEdmType theType)
{
	var typeName = string.Empty;
	if (theType is IEdmComplexType complex)
	{
		typeName =  complex.Name;
	}
	else if (theType is IEdmEntityType entity)
	{
		typeName =  entity.Name;
	}
	else if (theType is IEdmCollectionType collection)
	{
		typeName =  GetTypeName(collection.ElementType);
	}
	else if (theType is IEdmEnumType enumeration)
	{
		typeName =  enumeration.Name;
	}

	return StripNamespace(typeName);
}

private string GetTypeColor(IEdmType theType)
{
	if (theType is IEdmComplexType complex)
	{
		return "#Skyblue";
	}
	else if (theType is IEdmEntityType entity)
	{
		return "#PaleGreen";
	}
	return string.Empty;
}

private IEdmType GetFundamentalType(IEdmType theType)
{
	if (theType is IEdmCollectionType collection)
	{
		theType =  collection.ElementType.Definition;
	}
	return theType;
}

private void EmitStructuralType(IEdmStructuredType theType, string prototype)
{
	List<string> props = new List<string>();
	List<string> complexUsages = new List<string>();
	if (theType is IEdmEntityType)
	{
		// Add fake id property because everythign is derived from Graph's 'Entity' base type which would clutter the diagram.
		props.Add("+id: String");
	}

	foreach (IEdmStructuralProperty structProp in theType.DeclaredProperties.OfType<IEdmStructuralProperty>())
	{
		var typeName = this.GetTypeName(structProp.Type);
		props.Add($"+{structProp.Name}: {ConvertCollection(typeName)}");
		IEdmType propFundamental = GetFundamentalType(structProp.Type.Definition);
		if (propFundamental.TypeKind == EdmTypeKind.Complex ||
			propFundamental.TypeKind == EdmTypeKind.Enum)
		{
			string basePropType = StripCollection(typeName);
			complexUsages.Add($"{this.GetTypeName(theType)} +--> {basePropType}: {structProp.Name}");
		}
	}
	var isAbstract = theType.IsAbstract ? "abstract " : string.Empty;

        
        #line default
        #line hidden
        
        #line 175 "C:\Repos\CsdlToDiagram\CsdlClassDiagram.plant.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(isAbstract));

        
        #line default
        #line hidden
        
        #line 175 "C:\Repos\CsdlToDiagram\CsdlClassDiagram.plant.ttinclude"
this.Write("class ");

        
        #line default
        #line hidden
        
        #line 175 "C:\Repos\CsdlToDiagram\CsdlClassDiagram.plant.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(this.GetTypeName(theType)));

        
        #line default
        #line hidden
        
        #line 175 "C:\Repos\CsdlToDiagram\CsdlClassDiagram.plant.ttinclude"
this.Write(" <<");

        
        #line default
        #line hidden
        
        #line 175 "C:\Repos\CsdlToDiagram\CsdlClassDiagram.plant.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(prototype));

        
        #line default
        #line hidden
        
        #line 175 "C:\Repos\CsdlToDiagram\CsdlClassDiagram.plant.ttinclude"
this.Write(">> ");

        
        #line default
        #line hidden
        
        #line 175 "C:\Repos\CsdlToDiagram\CsdlClassDiagram.plant.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(this.GetTypeColor(theType)));

        
        #line default
        #line hidden
        
        #line 175 "C:\Repos\CsdlToDiagram\CsdlClassDiagram.plant.ttinclude"
this.Write(" {\r\n");

        
        #line default
        #line hidden
        
        #line 176 "C:\Repos\CsdlToDiagram\CsdlClassDiagram.plant.ttinclude"
 foreach ( var prop in props) { WriteLine(prop); }
        
        #line default
        #line hidden
        
        #line 176 "C:\Repos\CsdlToDiagram\CsdlClassDiagram.plant.ttinclude"
this.Write("}\r\n");

        
        #line default
        #line hidden
        
        #line 178 "C:\Repos\CsdlToDiagram\CsdlClassDiagram.plant.ttinclude"

	foreach ( var usage in complexUsages) { WriteLine(usage); }
}

private void EmitEntityContainer()
{
	if (this.model.EntityContainer == null)
	{
		return;
	}

	List<string> members = new List<string>();
	foreach (IEdmSingleton singleton in this.model.EntityContainer.Elements.OfType<IEdmSingleton>())
	{
		var singletonTypeName = GetTypeName(singleton.Type);
		members.Add($"+{singleton.Name}: {singletonTypeName}");

        
        #line default
        #line hidden
        
        #line 195 "C:\Repos\CsdlToDiagram\CsdlClassDiagram.plant.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(this.model.EntityContainer.Name));

        
        #line default
        #line hidden
        
        #line 195 "C:\Repos\CsdlToDiagram\CsdlClassDiagram.plant.ttinclude"
this.Write(" .. \"1..1\" ");

        
        #line default
        #line hidden
        
        #line 195 "C:\Repos\CsdlToDiagram\CsdlClassDiagram.plant.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(singletonTypeName));

        
        #line default
        #line hidden
        
        #line 195 "C:\Repos\CsdlToDiagram\CsdlClassDiagram.plant.ttinclude"
this.Write(": ");

        
        #line default
        #line hidden
        
        #line 195 "C:\Repos\CsdlToDiagram\CsdlClassDiagram.plant.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(singleton.Name));

        
        #line default
        #line hidden
        
        #line 195 "C:\Repos\CsdlToDiagram\CsdlClassDiagram.plant.ttinclude"
this.Write("\r\n");

        
        #line default
        #line hidden
        
        #line 196 "C:\Repos\CsdlToDiagram\CsdlClassDiagram.plant.ttinclude"

	}

	foreach (IEdmEntitySet entitySet in this.model.EntityContainer.Elements.OfType<IEdmEntitySet>())
	{
		var entitySetTypeName = GetTypeName(entitySet.EntityType());
		members.Add($"+{entitySet.Name}: {entitySetTypeName}");

        
        #line default
        #line hidden
        
        #line 204 "C:\Repos\CsdlToDiagram\CsdlClassDiagram.plant.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(this.model.EntityContainer.Name));

        
        #line default
        #line hidden
        
        #line 204 "C:\Repos\CsdlToDiagram\CsdlClassDiagram.plant.ttinclude"
this.Write(" .. \"0..*\" ");

        
        #line default
        #line hidden
        
        #line 204 "C:\Repos\CsdlToDiagram\CsdlClassDiagram.plant.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(StripCollection(entitySetTypeName)));

        
        #line default
        #line hidden
        
        #line 204 "C:\Repos\CsdlToDiagram\CsdlClassDiagram.plant.ttinclude"
this.Write(": ");

        
        #line default
        #line hidden
        
        #line 204 "C:\Repos\CsdlToDiagram\CsdlClassDiagram.plant.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(entitySet.Name));

        
        #line default
        #line hidden
        
        #line 204 "C:\Repos\CsdlToDiagram\CsdlClassDiagram.plant.ttinclude"
this.Write("\r\n");

        
        #line default
        #line hidden
        
        #line 205 "C:\Repos\CsdlToDiagram\CsdlClassDiagram.plant.ttinclude"

	}

        
        #line default
        #line hidden
        
        #line 207 "C:\Repos\CsdlToDiagram\CsdlClassDiagram.plant.ttinclude"
this.Write("class ");

        
        #line default
        #line hidden
        
        #line 208 "C:\Repos\CsdlToDiagram\CsdlClassDiagram.plant.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(this.model.EntityContainer.Name));

        
        #line default
        #line hidden
        
        #line 208 "C:\Repos\CsdlToDiagram\CsdlClassDiagram.plant.ttinclude"
this.Write(" <<entityContainer>> #LightPink {\r\n");

        
        #line default
        #line hidden
        
        #line 209 "C:\Repos\CsdlToDiagram\CsdlClassDiagram.plant.ttinclude"
 foreach ( var member in members) { WriteLine(member); }
        
        #line default
        #line hidden
        
        #line 209 "C:\Repos\CsdlToDiagram\CsdlClassDiagram.plant.ttinclude"
this.Write("}\r\n");

        
        #line default
        #line hidden
        
        #line 211 "C:\Repos\CsdlToDiagram\CsdlClassDiagram.plant.ttinclude"

}

private void EmitEnumType(IEdmEnumType theType)
{

        
        #line default
        #line hidden
        
        #line 216 "C:\Repos\CsdlToDiagram\CsdlClassDiagram.plant.ttinclude"
this.Write("enum ");

        
        #line default
        #line hidden
        
        #line 217 "C:\Repos\CsdlToDiagram\CsdlClassDiagram.plant.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(this.GetTypeName(theType)));

        
        #line default
        #line hidden
        
        #line 217 "C:\Repos\CsdlToDiagram\CsdlClassDiagram.plant.ttinclude"
this.Write(" <<enum>> #GoldenRod {\r\n");

        
        #line default
        #line hidden
        
        #line 218 "C:\Repos\CsdlToDiagram\CsdlClassDiagram.plant.ttinclude"
 foreach (IEdmEnumMember member in theType.Members) { WriteLine($"{member.Name}"); }
        
        #line default
        #line hidden
        
        #line 218 "C:\Repos\CsdlToDiagram\CsdlClassDiagram.plant.ttinclude"
this.Write("}\r\n");

        
        #line default
        #line hidden
        
        #line 220 "C:\Repos\CsdlToDiagram\CsdlClassDiagram.plant.ttinclude"

}

private void EmitInheritance(IEdmStructuredType theType)
{
	if (theType.BaseType != null)
	{

        
        #line default
        #line hidden
        
        #line 228 "C:\Repos\CsdlToDiagram\CsdlClassDiagram.plant.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(GetTypeName(theType.BaseType as IEdmStructuredType)));

        
        #line default
        #line hidden
        
        #line 228 "C:\Repos\CsdlToDiagram\CsdlClassDiagram.plant.ttinclude"
this.Write(" <|-- ");

        
        #line default
        #line hidden
        
        #line 228 "C:\Repos\CsdlToDiagram\CsdlClassDiagram.plant.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(GetTypeName(theType)));

        
        #line default
        #line hidden
        
        #line 228 "C:\Repos\CsdlToDiagram\CsdlClassDiagram.plant.ttinclude"
this.Write("\r\n");

        
        #line default
        #line hidden
        
        #line 229 "C:\Repos\CsdlToDiagram\CsdlClassDiagram.plant.ttinclude"

	}
}

private void EmitNavigationProperties(IEdmEntityType entity)
{
	foreach (IEdmNavigationProperty navProp in entity.DeclaredProperties.OfType<IEdmNavigationProperty>())
	{
		var target = (navProp.Type as IEdmTypeReference).Definition;
		IEdmEntityType entityTarget;
		var collectionProp = false;
		if (target is IEdmCollectionType coll)
		{
			entityTarget = (coll.ElementType as IEdmTypeReference).Definition as IEdmEntityType;
			collectionProp = true;
		}
		else
		{
			entityTarget = target as IEdmEntityType;
		}
		string navType = navProp.ContainsTarget ? "*" : string.Empty;
		string navCardinality = collectionProp ? "0..*" :  "0..1";

        
        #line default
        #line hidden
        
        #line 252 "C:\Repos\CsdlToDiagram\CsdlClassDiagram.plant.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(GetTypeName(entity)));

        
        #line default
        #line hidden
        
        #line 252 "C:\Repos\CsdlToDiagram\CsdlClassDiagram.plant.ttinclude"
this.Write(" ");

        
        #line default
        #line hidden
        
        #line 252 "C:\Repos\CsdlToDiagram\CsdlClassDiagram.plant.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(navType));

        
        #line default
        #line hidden
        
        #line 252 "C:\Repos\CsdlToDiagram\CsdlClassDiagram.plant.ttinclude"
this.Write("--> \"");

        
        #line default
        #line hidden
        
        #line 252 "C:\Repos\CsdlToDiagram\CsdlClassDiagram.plant.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(navCardinality));

        
        #line default
        #line hidden
        
        #line 252 "C:\Repos\CsdlToDiagram\CsdlClassDiagram.plant.ttinclude"
this.Write("\" ");

        
        #line default
        #line hidden
        
        #line 252 "C:\Repos\CsdlToDiagram\CsdlClassDiagram.plant.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(GetTypeName(entityTarget)));

        
        #line default
        #line hidden
        
        #line 252 "C:\Repos\CsdlToDiagram\CsdlClassDiagram.plant.ttinclude"
this.Write(": ");

        
        #line default
        #line hidden
        
        #line 252 "C:\Repos\CsdlToDiagram\CsdlClassDiagram.plant.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(navProp.Name));

        
        #line default
        #line hidden
        
        #line 252 "C:\Repos\CsdlToDiagram\CsdlClassDiagram.plant.ttinclude"
this.Write(" \r\n");

        
        #line default
        #line hidden
        
        #line 253 "C:\Repos\CsdlToDiagram\CsdlClassDiagram.plant.ttinclude"

	}
}

        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public class CsdlToPlantBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
